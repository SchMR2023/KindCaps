import cv2
import numpy as np
import serial

ser = serial.Serial('/dev/ttyUSB0', 115200)

blur = (3, 3)
thresh = 20
result = ''

colorDict = {
    '0' : np.array([[0, 141, 84], [10, 230, 255]]),     # red
    '1' : np.array([[22, 133, 170], [30, 214, 255]]),   # green
    '2' : np.array([[100, 91, 55], [127, 231, 196]]),   # blue
    '3' : np.array([[92, 112, 103], [109, 174, 181]])   # white
}

def getUART(result):
    return int(ser.readline())

def sendUART(result):
    ser.write(result)

start = int(getUART())

while not start:
    start = getUART()
  
cap = cv2.VideoCapture(0)                               # –≤–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã
                                                            
success, img = cap.read()                               # –∑–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–∞

if not success:                                         # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞–¥—Ä–∞
    result = 'ERROR'
    
else:
    imgHSV = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)           # –ø–µ—Ä–µ–≤–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Hue, Saturation, Value (–æ—Ç—Ç–µ–Ω–æ–∫, –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å, —è—Ä–∫–æ—Å—Ç—å)
    for color in colorDict:

        checkingColor = colorDict[color]
        
        h_min = checkingColor[0][0]
        h_max = checkingColor[1][0]
        s_min = checkingColor[0][1]
        s_max = checkingColor[1][1]
        v_min = checkingColor[0][2]
        v_max = checkingColor[1][2]

        lower = np.array([h_min, s_min, v_min])             # –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        upper = np.array([h_max, s_max, v_max])             # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞

        mask = cv2.inRange(imgHSV, lower, upper)            # —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        imgMask = cv2.bitwise_and(img, img, mask=mask)      # –Ω–∞–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞

        gray_image = cv2.cvtColor(imgMask, cv2.COLOR_BGR2GRAY)                                      # —á/–± —Ñ–æ—Ä–º–∞—Ç
        blurred = cv2.GaussianBlur(gray_image, blur, 0)                                             # —Ä–∞–∑–º—ã—Ç–∏–µ 
        _, thresh_img = cv2.threshold(blurred, thresh, 255, cv2.THRESH_BINARY)                      # –¥–≤–æ–∏—á–Ω—ã–π —á/–± —Ñ–æ—Ä–º–∞—Ç
        contours, _ = cv2.findContours(thresh_img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)      # –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤ 
        #                                   ü†ï                 ü†ï                      ü†ï
        #                              –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä—ã, –ø—Ä–æ—Å—Ç–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è(—É–ø—Ä–æ—â–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤)

        if cv2.contourArea(contours[0]) > 400:              # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞
            result = color                                  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑–Ω–∞—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
        else:
            result = 'ERROR'

        

sendUART(result)                                        # –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è